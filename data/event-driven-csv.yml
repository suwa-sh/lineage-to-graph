# Event-Driven Architecture Example (CSV-based models)
# Kafkaを使ったイベント駆動アーキテクチャのデータフロー
# ユースケース: HTTPリクエスト → Domain → Entity → RDB保存 → Kafkaパブリッシュ → サブスクライブ → 集計更新
#
# このバリエーションでは:
# - MoneyValueObject, MetadataValueObject をネストから表に出して Money, Metadata に名前短縮
# - program モデル (HttpRequest, TransactionDomain, Money, Metadata, TransactionEntity) を CSV 参照化
# - datastore モデル (transactions, user_balance_snapshot) はYAMLで定義
#
# 実行コマンド:
# python lineage_to_md.py data/event-driven-csv.yml data/output/event_driven_csv.md \
#   --program-model-dirs data/レイアウト \
#   --datastore-model-dirs data/テーブル定義

spec: lineage-v1

models:
  # CSV から読み込むので program モデルは空
  # - HttpRequest (data/レイアウト/HTTPリクエスト__HttpRequest.csv)
  # - TransactionDomain (data/レイアウト/トランザクションドメイン__TransactionDomain.csv)
  # - Money (data/レイアウト/金額__Money.csv)
  # - Metadata (data/レイアウト/メタデータ__Metadata.csv)
  # - TransactionEntity (data/レイアウト/トランザクションエンティティ__TransactionEntity.csv)

  # Layer 5: Kafka Message (YAML定義)
  - name: KafkaTransactionEvent
    type: program
    props: [event_id, transaction_id, amount]

  # Layer 6: History Query Result (YAML定義)
  - name: transaction_history
    type: datastore
    props: [user_id, transaction_id, amount]

  # Layer 7: Snapshot Table (CSV読み込み可能だがここではYAML定義)
  - name: user_balance_snapshot
    type: datastore
    props: [user_id, total_amount, last_updated]

lineage:
  # HTTP Request → Domain Object
  - { from: HttpRequest.request_id, to: TransactionDomain.id }
  - { from: HttpRequest.user_id, to: TransactionDomain.userId }
  - { from: HttpRequest.timestamp, to: TransactionDomain.createdAt, transform: "parse as timestamp" }

  # HTTP Request → ValueObjects
  - { from: HttpRequest.amount, to: Money.amount }
  - { from: JPY, to: Money.currency }
  - { from: api, to: Metadata.source }
  - { from: v1.0, to: Metadata.version }

  # ValueObjects → TransactionDomain (モデル全体参照)
  - { from: Money, to: TransactionDomain.money }
  - { from: Metadata, to: TransactionDomain.metadata }

  # Domain Object → Entity Object
  - { from: TransactionDomain.id, to: TransactionEntity.transactionId }
  - { from: TransactionDomain.userId, to: TransactionEntity.userId }
  - { from: TransactionDomain.money, to: TransactionEntity.amount , transform: "money.amount"}
  - { from: TransactionDomain.createdAt, to: TransactionEntity.createdAt }

  # Entity Object → RDB Table (ORM save)
  - { from: TransactionEntity.transactionId, to: transactions.transaction_id }
  - { from: TransactionEntity.userId, to: transactions.user_id }
  - { from: TransactionEntity.amount, to: transactions.amount }
  - { from: TransactionEntity.createdAt, to: transactions.created_at }

  # Domain Object → Kafka Event (パブリッシュ)
  - { from: TransactionDomain.id, to: KafkaTransactionEvent.transaction_id }
  - { from: UUID生成, to: KafkaTransactionEvent.event_id }
  - { from: TransactionDomain.money, to: KafkaTransactionEvent.amount, transform: "money.amount" }

  # Kafka Event → History Query (サブスクライブ後のDB検索)
  - { from: KafkaTransactionEvent.transaction_id, to: transaction_history.transaction_id, transform: "lookup from transactions" }
  - { from: transactions.user_id, to: transaction_history.user_id, transform: "join by transaction_id" }
  - { from: transactions.amount, to: transaction_history.amount, transform: "join by transaction_id" }

  # History + Kafka → Snapshot Update (集計して更新)
  - { from: transaction_history.user_id, to: user_balance_snapshot.user_id }
  - { from: [transaction_history.amount, KafkaTransactionEvent.amount], to: user_balance_snapshot.total_amount, transform: "sum(history.amount) + kafka.amount" }
  - { from: now(), to: user_balance_snapshot.last_updated, transform: "current timestamp" }
