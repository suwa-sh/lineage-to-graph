{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://example.com/lineage-v1.schema.json",
  "title": "Column Lineage Spec (v1)",
  "description": "Minimal column-level lineage spec for Markdown/Mermaid generation. Uses subgraph=model name; fields are nodes. Literals are plain strings in `from` (no dot).",
  "type": "object",
  "additionalProperties": false,
  "required": ["spec", "lineage"],
  "properties": {
    "spec": {
      "type": "string",
      "const": "lineage-v1",
      "description": "Schema version identifier."
    },
    "models": {
      "type": "array",
      "minItems": 0,
      "items": {
        "$ref": "#/$defs/modelDefinition"
      },
      "description": "Set of source/intermediate/target models with their fields. Can be empty when using CSV model files."
    },
    "lineage": {
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "additionalProperties": false,
        "required": ["from", "to"],
        "properties": {
          "from": {
            "description": "Source(s). Each token can be: a model field (Model.field), a model instance field (Model#instance.field), a model reference (Model), a model instance reference (Model#instance), or a literal string (e.g., JP, now()).",
            "oneOf": [
              {
                "type": "string",
                "minLength": 1
              },
              {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "string",
                  "minLength": 1
                },
                "uniqueItems": false
              }
            ]
          },
          "to": {
            "type": "string",
            "minLength": 1,
            "description": "Required target. Can be: Model.field, Model#instance.field, Model, or Model#instance."
          },
          "transform": {
            "type": "string",
            "description": "Optional free-form description of the transformation/aggregation/condition (e.g., 'toUpperCase', 'sum group_by: customer_id, order_date')."
          }
        }
      },
      "description": "Column-level edges."
    }
  },
  "$defs": {
    "modelDefinition": {
      "type": "object",
      "additionalProperties": false,
      "required": ["name", "type", "props"],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "description": "Model/type/table name. Used as Mermaid subgraph title."
        },
        "type": {
          "type": "string",
          "enum": ["program", "datastore"],
          "description": "Category for coloring/styling."
        },
        "props": {
          "type": "array",
          "minItems": 1,
          "uniqueItems": true,
          "items": {
            "type": "string",
            "minLength": 1
          },
          "description": "Field/property names belonging to this model."
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/modelDefinition"
          },
          "description": "Optional nested child models (e.g., Value Objects, nested entities)."
        }
      }
    }
  },
  "examples": [
    {
      "spec": "lineage-v1",
      "models": [
        { "name": "UserDto", "type": "program", "props": ["name", "country"] },
        { "name": "user_table", "type": "datastore", "props": ["name", "country", "load_timestamp"] },
        { "name": "sales", "type": "datastore", "props": ["amount", "customer_id", "order_date::date", "status"] },
        { "name": "daily_summary", "type": "datastore", "props": ["total_amount"] }
      ],
      "lineage": [
        { "from": "UserDto.name", "to": "user_table.name" },
        { "from": "UserDto.country", "to": "user_table.country", "transform": "toUpperCase" },
        { "from": "JP", "to": "user_table.country" },
        { "from": "now()", "to": "user_table.load_timestamp", "transform": "as load_timestamp" },
        { "from": ["sales.amount"], "to": "daily_summary.total_amount", "transform": "sum group_by: customer_id, order_date filter: status in ['PAID','SHIPPED']" }
      ]
    },
    {
      "spec": "lineage-v1",
      "models": [
        {
          "name": "TransactionDomain",
          "type": "program",
          "props": ["id", "userId", "createdAt"],
          "children": [
            {
              "name": "MoneyValueObject",
              "type": "program",
              "props": ["amount", "currency"]
            }
          ]
        },
        { "name": "HttpRequest", "type": "program", "props": ["request_id", "amount"] }
      ],
      "lineage": [
        { "from": "HttpRequest.request_id", "to": "TransactionDomain.id" },
        { "from": "HttpRequest.amount", "to": "TransactionDomain.MoneyValueObject.amount" }
      ]
    },
    {
      "spec": "lineage-v1",
      "models": [],
      "lineage": [
        { "from": "HttpRequest.amount", "to": "TransactionEntity.amount" },
        { "from": "TransactionEntity.amount", "to": "transactions.amount" }
      ],
      "$comment": "CSV-based example: models loaded from CSV files using --program-model-dirs and --datastore-model-dirs"
    },
    {
      "spec": "lineage-v1",
      "models": [
        { "name": "HttpRequest", "type": "program", "props": ["amount_jpy", "amount_usd"] },
        { "name": "Money", "type": "program", "props": ["amount", "currency"] },
        { "name": "Transaction", "type": "datastore", "props": ["amount_jpy", "amount_usd"] }
      ],
      "lineage": [
        { "from": "HttpRequest.amount_jpy", "to": "Money#jpy.amount" },
        { "from": "JP", "to": "Money#jpy.currency" },
        { "from": "HttpRequest.amount_usd", "to": "Money#usd.amount" },
        { "from": "US", "to": "Money#usd.currency" },
        { "from": "Money#jpy", "to": "Transaction.amount_jpy", "transform": "save JPY amount" },
        { "from": "Money#usd", "to": "Transaction.amount_usd", "transform": "save USD amount" }
      ],
      "$comment": "Model instance example: Same Money model used with different instances (#jpy, #usd)"
    }
  ]
}